;;; day24 --- solving day 24 -*- lexical-binding: t; -*-

;;; Commentary:

;; Input:
;; #####################################################################################################################################################################################
;; #...........#...#.....#.....#.....#....7#.................#.............#.....#.#.#...#.#.#.......#.......#.........#.....#.....#...#.....#.#.#.....#.......#.#.....#.....#.#.......#
;; #.#####.###.#####.###.#.#.#.#.#.#.#.###.###.#.#.#######.###.#.#####.#.#.#.#.###.#.#.#.#.#.#.#####.#.#.###.#.###.#.#.#.###.#.#.###.#.#.#####.#.#.#.#.#####.###.#.#.###.#.#.#.#.#.###.#
;; #.......#...#...#.#.....#.#.#...#...#...#.....#...#.......#.......#.......#.#.....#.#.....#.........#...#...#.#...#.#.#.....#.....#.......#.#...#.#.......#...#.#...#.#...#.#.#.....#
;; #.#.#.###.#.#.#.###.###.#.#.###.#.###.#.#.#.###.#.#.#.#.#.#######.#.#####.#.#.###.#.#.###.#.#.#####.#.#.#####.#.#.#.#.#.#.#.#.#.#####.#.#.###.#.#.#.###.###.#.#.#.#.#.#.#.#.#.#.#.#.#
;; #...........#.#.....#.....#...#...#.#.....#.#.#.........#.....#...#...#...#...#...#.#.....#.#.....#...#.........#...#.........#.#.#...............#.....#.#...#.#...#.#.......#.#...#
;; #.#####.###.#.###########.#.#.#.#.#.#.#.###.#.#######.#.#.#.#.#.###.#.#.#.#.#.#.#.###.#.#.#.#########.###.#.#####.#.#############.#.#.#.#.#.#.###.#.#.#.#.###.#.#.#.#.#.#####.#.###.#
;; #...#.#.....#....4#.......#...#.......#.......#...#.......#...#.#...#...#...#.....#.#.#...#.....#...#...#...#...#...#.............#...#...#...#...#.#...#.#...#...#.#...#..0#.....#.#
;; #.#.#.###.#.#.#.#.###.###.#.###.#####.#.###.#.#.#.#.#####.#.#.###.###.#.###.###.###.###.#.#.#.#.###.#.#.#.#.#.#####.#.#.#####.#.#.###.#.#.#.###.#.#.#.#.###.#.#.#####.#.#.###.#.#.###
;; #.#...#...........#...#.....#.#...#.#.#.#.#.......#...........#.....#.....#.#.#.#.......#.#...#.....#.#.......#.....#...#.......#.#.....#.#.#.....#.#.#.#.#.#.#.........#.#...#.#.#.#
;; #.#.#.#.#########.###.#.#.###.#.###.#####.###.#.#.#.###.#.#.###.###.###.#.###.#########.#.###.#.#.#.#.#.#.#.#.#########.#.#####.#.#####.#.#.###.#.#.#.#.#.#####.###.#.#.#.###.#.#.#.#
;; #.#.....#.....#.......#.#...#.....#...........#.#.#.....#...#.#.........#.#.#.#.........#.#.......#.......#...#...#...#...#.#...........#.#.....#.#.......#...........#...#...#.....#
;; #.#####.#.#.#.#####.#.#.#.#.#.#.#.#.#.#.#.#.###.###.###.#####.###.###.#.###.#.#.#.###.#######.###.#.#.#.#####.#.#####.#.###.#.#####.#.#.#.#########.#.###.#.#.#.#.#.#.###.#####.###.#
;; #.#...#.........#.....#...#.......#...#.#...#.......#...#...#.#.......#.......#...#.....#...........#...#.#.....#.................#.#...#.#.........#.#...#.#.#.#.......#.#.....#...#
;; #.#.#.#.#.###.#.#.###.#.#.#.#####.#.###.#.###.###.###.#######.#.###.###.#.###.#.#.###.#.#.#####.###.#.#.#.#.###.#.###.#######.#.#.#.#.#.#.#.#.#.#######.#.#.#.#.###.#.#.#.###.#.#.###
;; #.....#.#...#.....#...#.#.#.....#.#.#...#.#.#...........#.....#.#...#.................#.#.#...#.........#.......#.#...#.......#.#.#.....#...#...........#.#...#.........#...........#
;; ###.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#####.###.###.#.###.#.#.#.#.###.#.#######.#.#####.###.#.#.#.#.#.#.#####.#.#.#.###.#.#.#######.#.#.#.#####.#.###.#.###.###.#.#.###.#####
;; #.#.#.#.#...#.....#...#...#...#...#.#...#.#.#.......#...#.#...............#...#.....#.....#.....#.....#.#.#.......#...#.#.....#.....#.........#...#...#.#.......#...#.....#.....#...#
;; #.#.#.#.###.###.#.#.#.#########.#.#.#########.#.#.###.#.#.#.###.#####.###.#.#.#.#.###.#.#.#.#.###.#.#.#.#.#.#.#####.###.#.#.#.###.#.#.#.#.#.#.###.#.#.#.###.#.###.#####.###.#.#.#.#.#
;; #.....#.....#.....#.......#...........#...#...#.#.....#.#.......#.......#.#.#.........#.............#...#.#.#.....#.....#...#...#.......#...#.......#...#...#...#....1#.....#...#.#.#
;; ###.#.#.#######.#.#.#.###.#.#.###.###.#.###.#.#.#.#.#.#.###.###.###.#.#.#.#.#.#.#.#.#####.#####.###.#.###.#.#.#.#.###.###.#.#####.###.#.#.###.###.#######.#.###.###.#.###.#.#.#.###.#
;; #...#...#5......#.#...#.......#...#.........#.....#...........#...#.#.......#.#...........#...#.......#.....#.#.......#...#.....#.......#...#.#.................#.....#...#...#.....#
;; #.###.#.#.#.#####.#####.#####.###.#.#########.###.###.#.#.#####.#.#.###.#.###.###.#.#.#.#.#.###.#.#######.#.#.#.#.#.###.#.#.###.#.#####.###.#.#.#.###.#.#.###.#.###.#########.#####.#
;; #.#.#...#...#.....#.....#.#.....#.#.....#.........#...#...#.....#.#.#.......#.......#.......#...#.........#...#...#.....#.#.#...#.........#.#.#.#.#.....#.#.....#.........#.....#...#
;; ###.###.###.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#####.#.#.#.#.###.#.#####.#.###.#.#.###.#.#.#.#.#.###.#.#.###.#.#########.#.#####.###.#.###.#####.#.#.#.#.#.#.###.#.#.#.#.#.###.#.#.#.#.#.#
;; #.#.#.#.......#...#.#...#.....#.#.................#.#.........#.....#...#...#.#.....#.....#.....#...#...#.....#...#...#...#.#.#...#...#...#...#...#...#.#...#.......................#
;; #.###.#############.#.#######.#.###.###########.#.#.###.###.#.#.###.###.#.###.###.#.#.###.#.#.###.#.#.#.###.#.###.#.#.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#.###.###.#.#.#.#.#.#.#.#.#.#
;; #.....#.#.......#...............#.....#...........#...#.#.#...#...#...#.#.#...#.......#...#...#.....#.....#.#.#...............#.#...#.....#.....#.#.#.#.......#...#.#...#...#.....#.#
;; #.#.###.#.###.#.#.#######.#.###.#.###.#.#.#.#.#####.#.#.#.#.#.#.#.###.#######.#.#.###.###.#.#.#.#######.#.###.#.#.###########.###.#########.#.#####.#.#.#.#.#.#.#.#.#.#####.###.#.###
;; #...#...#.#...............#.#.......#.#...#.#.......#.#...#.#.....#.....#.#.......#.........#.#.#...#.#...................#...#...#.............#.......#.......#.#...#...#.....#.#.#
;; #.#.#####.#.#######.#.###.#.#####.#.#.#.#.###.#.#.#.###.#.#.#####.###.###.#.#.#.#.#.#####.#.###.#.#.#.#.###.#.#####.#######.#.###.#.#.#.#.#####.#.#####.###.#######.#.#.#.#.###.#.#.#
;; #.........#.#...#.#.......#...#...#...........#.....#.....#.......#.....#.....#.#.#...#.#...#.....#.....#.....#...#.#.........#.....#.....#.#.#.....#...#...#.......#.#.#.....#...#.#
;; ###.#######.#.#.#.#.###.#.###.#.###.###.#.###.#.#.#.#.#.#.###.#.###.#.#.#.###.###.#.#.#.#.###.#.#.###.#.#.#.#.#.#.#.#.#.#.#####.#####.###.#.#.#.#####.###.###.#.#.#####.#.#####.#.###
;; #...#.......#.......#...#...#.........#.....#...#...#...#.#...#.........#...#.....#...#.#.#.#.#...#.....#.#.....#.....#.#.........#.....#.#.#.....#...#...#.......#.#3....#...#.....#
;; #.###.###.#####.###.###.###.#.###.#.###.###.#.###.###.#.#.#######.#.#.#.#.###.#.#.#.###.###.#.#.###.#.#.#.#####.###.###.###.#.###.#.#.###.#.#.#####.###.#.#.###.#.#.###.#.#.#.###.#.#
;; #.#...#.....#.#...#...#.#...........#...#.#...#.#.#.....#.#.......#.#.....#...#...#.....#...#.......#.........#...#.#...#.#.#.#.....#.....#.......#.........#.....#.....#.#...#.#...#
;; #.#.#.#####.#.###########.###.#.#####.###.###.#.###.###.#.#.#####.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#.#.#.#.###.#.#.#.#.#####################.###.###.###.#.#.#.#.#.#
;; #.#...#.#...#.....#...#...#.....#.......#.......#.....#.#...#.....#...#.....#...#.......#...#.#...#.#...#.#...........#...#.#...#.#.......#.........#.#.......#...........#...#...#.#
;; ###.###.#.#.#.#.#.#.#####.#.#.#.###.#.#######.#.###.#.#####.#.###.###.#.#.###.#.#.#.###.#.#######.#.#.#.###.###.#.#######.#.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#.###.#.#.###.###.#.#.###
;; #.#...#.......#.#...#.#.........#.........#...#.#...#.........#.#...#...#.........#...#.....#.......#...#.....#.....#...........#..2#.....#.#.....#...#.#.....#.......#...#...#...#.#
;; #.#.#.#.#.#.#.#.###.#.###.#.###.#.#.###.#.#.#.#.#.#.###.#.#####.#.###.###.#.###.#.#.#.#####.#.#.###.#.###.###.###.#.#####.#.#####.#####.#.#.#.#.#.###.#.#.#####.#.#.#.#.###.#.#.###.#
;; #.#..6#.........#...#.#.......#.#.......#.........#...#.....#.#...#...#.#.#.....#.....#.#.........................#.......#...#.#.........#.#...#...........#...#.....#.....#...#...#
;; #####################################################################################################################################################################################


;;; Code:

(defvar *q-return-to-0* nil)

(defun q-adjacent-squares (pos lines x-dim)
  "Produce the positions as single integers which are adjacent to POS in LINES.

X-DIM is the x dimension of the board, used to calculate coordinate."
  (let ((x     (mod pos x-dim))
        (y     (/   pos x-dim))
        (y-dim (length lines))
        result)
    (cl-labels
        ((can-move-to (x y) (and (< x x-dim)
                                 (> x 0)
                                 (< y y-dim)
                                 (> y 0)
                                 (/= ?# (aref (aref lines y) x)))))
      (when (can-move-to (1- x) y)
        (push (1- pos) result))
      (when (can-move-to (1+ x) y)
        (push (1+ pos) result))
      (when (can-move-to x (1- y))
        (push (- pos x-dim) result))
      (when (can-move-to x (1+ y))
        (push (+ pos x-dim) result))
      result)))

(defun q-parse (input)
  "Parse INPUT into a graph represented by an array of arrays.

If any numbers are found in the graph then they are added to a
separate list and a treated as reachable in the graph."
  (let* ((pos       0)
         (lines     (split-string input "\n" t " "))
         (idx-lines (apply #'vector lines))
         (squares   (seq-reduce #'+ (mapcar #'length lines) 0))
         (graph     (make-vector squares nil))
         (x-dim     (length (car lines)))
         x
         start
         objectives)
    (dolist (line lines graph)
      (seq-do (lambda (char)
                (progn
                  (when (/= ?# char)
                    (when (/= ?\. char)
                      (when (= ?0 char)
                        (setq start pos))
                      (push `(,(string-to-number (string char)) . ,pos) objectives))
                    (aset graph pos (q-adjacent-squares pos idx-lines x-dim)))
                  (cl-incf pos)))
              line))
    (cons start (cons objectives graph))))

(defmacro q-peek (queue)
  "Produce the first element of QUEUE without removing it."
  `(car (queue-head ,queue)))

(defun q-done (path objective-positions)
  "Produce t if PATH has all positions in OBJECTIVE-POSITIONS."
  (= (length objective-positions) (length (cl-intersection path objective-positions))))

(defun q-bfs (graph start objectives)
  "Produce the fewest steps required to move around GRAPH from START through OBJECTIVES."
  (let ((paths               (make-queue))
        (objective-positions (mapcar #'car objectives))
        (seen                (make-hash-table :test #'equal)))
    (queue-enqueue paths (list start))
    (puthash (list start) t seen)
    (while (not (q-done (q-peek paths) objective-positions))
      (let ((current-path (queue-dequeue paths)))
        (mapc (lambda (next-path)
                (when (not (gethash next-path seen))
                  (queue-enqueue paths next-path)
                  (puthash next-path t seen)))
              (mapcar (lambda (node) (cons node current-path))
                      (aref graph (car current-path))))))
    (1- (length (q-peek paths)))))

(defun q-shortest-between (here there graph)
  "Produce the shortest path between HERE and THERE on GRAPH."
  (let ((paths (make-queue))
        (seen  (make-vector (length graph) nil)))
    (queue-enqueue paths (list here))
    (aset seen here t)
    (while (not (= there (car (q-peek paths))))
      (let ((current-path (queue-dequeue paths)))
        (mapc (lambda (next-path)
                (when (not (aref seen (car next-path)))
                  (queue-enqueue paths next-path)
                  (aset seen (car next-path) t)))
              (mapcar (lambda (node) (cons node current-path))
                      (aref graph (car current-path))))))
    (1- (length (q-peek paths)))))

(defun q-create-tsp-graph (graph objectives)
  "Produce an array of the shortest distance between nodes in GRAPH.

OBJECTIVES lists the nodes we need to visit and their positions."
  (let ((distances (make-vector (length objectives) nil)))
    ;; Do the upper triangle
    (dotimes (l (length objectives))
      (aset distances l (make-vector (length objectives) nil))
      (dotimes (L (- (length objectives) (- (length objectives) l 1)))
        (aset (aref distances l) L (q-shortest-between (alist-get l objectives)
                                                       (alist-get L objectives)
                                                       graph))))
    ;; Then copy down the rest with transposition
    (dotimes (l (1- (length objectives)) distances)
      (dotimes (L (- (length objectives) l 1))
        (aset (aref distances l) (+ L l 1)
              (aref (aref distances (+ L l 1)) l))))))

(defun q-ascending-ints (x &optional start)
  "Create an ascending list of ints up to X.

If START is supplied, then start the list from START."
  (let ((start (if start start 0))
        result)
    (nreverse
     (dotimes (i x result)
       (push (+ i start) result)))))

(defun q-distance (path graph)
  "Produce the distance of walking PATH through GRAPH."
  (let ((distance 0))
    (dotimes (i (1- (length path)) distance)
      (cl-incf distance (aref (aref graph (pop path))
                              (car path))))))

(defun q-tsp (graph)
  "Find the shortest tour of all nodes in GRAPH."
  (let ((perms (mapcar (lambda (xs) (cons 0 xs))
                       (-permutations (q-ascending-ints (1- (length graph)) 1))))
        best-distance)
    (dolist (perm perms best-distance)
      (let ((next-distance (+ (q-distance perm graph)
                              (if *q-return-to-0*
                                  (aref (aref graph (car (last perm))) 0)
                                0))))
        (when (or (null best-distance)
                  (< next-distance best-distance))
          (setq best-distance next-distance))))))

(defun q-answer-question (input)
  "Produce the shortest number of steps to reach all objectives in INPUT."
  (interactive "sInput: ")
  (let ((*q-return-to-0* (y-or-n-p "Return to zero? ")))
    (pcase (q-parse input)
      (`(,start ,objectives . ,graph)
       (message "%s" (q-tsp (q-create-tsp-graph graph objectives)))))))

;; Without returning: 428
;; With return:       680

(provide 'day24)
;;; day24 ends here
